<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<!--
This file defines a set of Event Tracing for Windows (ETW) providers that are used to emit custom events into a trace being recorded by xperf/wpr or logman. The intent of the custom providers is to add some context to the raw kernel counter data in order to help with interpretation.

This file is processed using the following command line:
  mc.exe -um profiler_manifest.man
The outputs of this process are:
  provider.h and provider.rc

The mc.exe executable is referred to as the message compiler, and this process is implemented as a custom build step that executes before the source code is compiled. The mc.exe file can be found at:
  C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\mc.exe

One thing to be aware of is that in VS2010, the custom build step will not run if you don't have any source files in the project. VS2013 does not have this problem.

The generated header file should be included by one or more source files, which get compiled into profiler_p.dll (the provider DLL containing the public API.)

The resource file should either be added to the project being instrumented or merged in with an existing resource file. In this case, we just build a resource-only DLL file named profiler_r.dll that embeds the necessary files.

The resource-only DLL profiler_r.dll is expected to be located in the %TEMP% directory. The profiler_enable.cmd script does this automatically.

The header file contains macros and functions to emit events. For more information on the format of the instrumentation manifest (this file), see the MSDN article 'Writing an Instrumentation Manifest', currently available at:
  http://msdn.microsoft.com/en-us/library/windows/desktop/dd996930%28v=vs.85%29.aspx

The above-referenced article mentions a GUI tool, ECManGen.exe, which is part of the Windows SDK (in the Bin directory) and allows you to generate the manifest without ever having to edit the XML manually. The specific path is:
  C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\ECMangen.exe

To make this easier to get to, add it to your Tools menu. To do this, go Tools->External Tools..., click 'Add...' and specify ECManGen as the Title, C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Bin\ECMangen.exe as the Command, and $(ProjectDir) as the Initial Directory.

If you do want to edit this file manually, and are using Visual Studio as your XML editor, then you can get some IntelliSense help by using the EventManifest schema. To do this, go XML->Schemas..., click 'Add...' and then select file:
  C:\Program Files (x86)\Microsoft SDKs\Windows\v7.1A\Include\eventman.xsd

I cannot find this schema file in later (v8.0, v8.1, v8.1A) SDK directories.

Before recording traces you need to execute the following commands:

  xcopy /y profiler_r.dll %TEMP%
  wevutil um profiler_manifest.man
  wevutil im profiler_manifest.man

This unregisters, and then re-registers the custom ETW providers with the ETW system. This process should be implemented as a custom build step that executes after your executable is compiled and linked. To generate a trace on a non-dev system, execute these steps manually by editing and running the provided batch file script, registeretw.cmd.
-->
<instrumentationManifest xsi:schemaLocation="http://schemas.microsoft.com/win/2004/08/events eventman.xsd" xmlns="http://schemas.microsoft.com/win/2004/08/events" xmlns:win="http://manifests.microsoft.com/win/2004/08/windows/events" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:trace="http://schemas.microsoft.com/win/2004/08/events/trace">
    <instrumentation>
        <events>
            <provider name="Profiler.Task" guid="{042CD377-8F6E-4BF0-93DE-B4BA32234771}" symbol="TASK_PROFILER" resourceFileName="%TEMP%\profiler_r.dll" messageFileName="%TEMP%\profiler_r.dll">
                <events>
                    <event symbol="RegisterProfiledProcessEvent" value="100" task="RegisterSchedulerComponents" opcode="RegisterProcess"    template="T_ProcessInfo"        />
                    <event symbol="RegisterWorkerThreadEvent"    value="101" task="RegisterSchedulerComponents" opcode="RegisterWorker"     template="T_WorkerInfo"         />
                    <event symbol="RegisterTaskSourceEvent"      value="102" task="RegisterSchedulerComponents" opcode="RegisterTaskSource" template="T_TaskSourceInfo"     />
                    <event symbol="DefineTaskEvent"              value="103" task="TaskStateTransition"         opcode="Define"             template="T_TaskDefinitionInfo" />
                    <event symbol="TaskReadyToRunEvent"          value="104" task="TaskStateTransition"         opcode="ReadyToRun"         template="T_TaskReadyToRunInfo" />
                    <event symbol="TaskLaunchEvent"              value="105" task="TaskStateTransition"         opcode="Launch"             template="T_TaskLaunchInfo"     />
                    <event symbol="TaskFinishEvent"              value="106" task="TaskStateTransition"         opcode="Finish"             template="T_TaskFinishInfo"     />
                </events>
                <tasks>
                    <task name="RegisterSchedulerComponents" symbol="RegisterSchedulerComponentsTask" value="1" eventGUID="{B4C458C7-AD6A-494C-9517-159821F304BE}" />
                    <task name="TaskStateTransition"         symbol="TaskStateTransitionTask"         value="2" eventGUID="{249C14B6-FEE0-4797-930F-2B08389A3EFD}" />
                </tasks>
                <opcodes>
                    <opcode name="RegisterProcess"    symbol="RegisterProcessOpcode"    value="10" />
                    <opcode name="RegisterWorker"     symbol="RegisterWorkerOpcode"     value="11" />
                    <opcode name="RegisterTaskSource" symbol="RegisterTaskSourceOpcode" value="12" />
                    <opcode name="Define"             symbol="DefineTaskOpcode"         value="13" />
                    <opcode name="ReadyToRun"         symbol="TaskReadyToRunOpcode"     value="14" />
                    <opcode name="Launch"             symbol="TaskLaunchOpcode"         value="15" />
                    <opcode name="Finish"             symbol="TaskFinishOpcode"         value="16" />
                </opcodes>
                <keywords>
                    <keyword name="SchedulerSetup" symbol="SchedulerSetupKeyword" mask="0x1" />
                    <keyword name="Scheduler"      symbol="SchedulerKeyword"      mask="0x2" />
                </keywords>
                <templates>
                    <template tid="T_ProcessInfo">
                        <data name="ProcessID"       inType="win:UInt32" outType="win:PID"         />
                        <data name="ComputePoolSize" inType="win:UInt32" outType="xs:unsignedInt"  />
                        <data name="GeneralPoolSize" inType="win:UInt32" outType="xs:unsignedInt"  />
                        <data name="ClockFrequency"  inType="win:UInt64" outType="xs:unsignedLong" />
                    </template>
                    <template tid="T_WorkerInfo">
                        <data name="ThreadID"  inType="win:UInt32" outType="win:TID"        />
                        <data name="PoolID"    inType="win:UInt32" outType="xs:unsignedInt" />
                        <data name="PoolIndex" inType="win:UInt32" outType="xs:unsignedInt" />
                    </template>
                    <template tid="T_TaskSourceInfo">
                        <data name="SourceName"  inType="win:AnsiString" outType="xs:string"      />
                        <data name="ThreadID"    inType="win:UInt32"     outType="win:TID"        />
                        <data name="SourceIndex" inType="win:UInt32"     outType="xs:unsignedInt" />
                    </template>
                    <template tid="T_TaskDefinitionInfo">
                        <data name="TaskID"      inType="win:UInt32"     outType="win:HexInt32"   />
                        <data name="ParentID"    inType="win:UInt32"     outType="win:HexInt32"   />
                        <data name="EntryPoint"  inType="win:Pointer"    outType="win:HexInt64"   />
                        <data name="SourceIndex" inType="win:UInt32"     outType="xs:unsignedInt" />
                        <data name="Dependency1" inType="win:UInt32"     outType="win:HexInt32"   />
                        <data name="Dependency2" inType="win:UInt32"     outType="win:HexInt32"   />
                        <data name="Dependency3" inType="win:UInt32"     outType="win:HexInt32"   />
                    </template>
                    <template tid="T_TaskReadyToRunInfo">
                        <data name="TaskID" inType="win:UInt32" outType="win:HexInt32" />
                    </template>
                    <template tid="T_TaskLaunchInfo">
                        <data name="TaskID"       inType="win:UInt32" outType="win:HexInt32" />
                        <data name="WorkerThread" inType="win:UInt32" outType="win:TID"      />
                    </template>
                    <template tid="T_TaskFinishInfo">
                        <data name="TaskID"       inType="win:UInt32" outType="win:HexInt32" />
                        <data name="WorkerThread" inType="win:UInt32" outType="win:TID"      />
                    </template>
                </templates>
            </provider>
        </events>
    </instrumentation>
    <localization>
        <resources culture="en-US">
            <stringTable>
                <!-- <string id="A.map.foo.0.message" value="your text" /> -->
            </stringTable>
        </resources>
    </localization>
</instrumentationManifest>

